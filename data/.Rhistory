if (y > ymax) y <- ymax
dy <- -dy * runif(1, .9, 1.1)
sound <- 10
}
# Caught by paddle?
if (x < xmin & (y > ypaddle - (psize / 2)) & y < ypaddle + (psize / 2)) {
if (x < xmin) x <- xmin
dx <- -dx * runif(1, .9, 1.1)
sound <- 2
score <- score + 1
}
# Draw ball
points(x, y, pch = 15, col = "white", cex = 2)
if (sound !=0) #beep(sound)
# Move paddle
if (runif(1, 0, 1) < skill) ypaddle <- ypaddle + dy # Imperfect follow
# Draw paddle
# Erase back line
lines(c(0, 0), c(0, 30), type = "l", lwd = 8, col = "black")
# Keep paddle inside window
if (ypaddle < (psize / 2)) ypaddle <- (psize / 2)
if (ypaddle > 30 - (psize / 2)) ypaddle <- 30 - (psize / 2)
# Draw paddle
lines(c(0, 0), c(ypaddle - (psize / 2), ypaddle + (psize / 2)), type = "l", lwd = 8, col = "white")
}
#beep(8)
text(15,15, "GAME OVER", cex=5, col = "white")
s <- ifelse(score == 1, "", "s")
text(15,5, paste0(score, " Point", s), cex=3, col = "white")
install.packages("caret")
data("iris")
dataset <- iris
library(caret)
data("iris")
dataset <- iris
#create list of 80% of the rows in the og dataset we can use for training
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
#get 20% of data for validation
validation <- dataset[-validation_index,]
#use remaining 80% of data to train and test models
dataset <- dataset[validation_index,]
#dimensions of dataset
dim(dataset)
sapply(dataset, class)
head(dataset)
levels(dataset$Species)
percentage <- prop.table(table(dataset$Species)) * 100
cbind(freq=table(dataset$Species), percentage=percentage)
summary(dataset)
par(mfrow=c(1,4))
for(i in 1:4){
boxplot(x[,i], main=names(iris)[i])
}
x <- dataset[,1:4]
y <- dataset[,5]
#boxplot for each attribute on one image
quartz()
par(mfrow=c(1,4))
for(i in 1:4){
boxplot(x[,i], main=names(iris)[i])
}
#boxplot for each attribute on one image
quartz()
par(mfrow=c(1,4))
for(i in 1:4){
boxplot(x[,i], main=names(iris)[i])
}
featurePlot(x=x, y=y, plot="ellipse")
quartz()
featurePlot(x=x, y=y, plot="ellipse")
#box and whisker plots for each attribute
quartz()
featurePlot(x=x, y=y, plot="box")
quartz()
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
######build models
#linear algs
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
##nonlinear
#CART
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
#kNN
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
#advanced algs
#SVM
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
install.packages("e1071")
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
set.seed(7)
fit.cart <- train(Species~., data=dataset, method="rpart", metric=metric, trControl=control)
set.seed(7)
fit.knn <- train(Species~., data=dataset, method="knn", metric=metric, trControl=control)
set.seed(7)
fit.svm <- train(Species~., data=dataset, method="svmRadial", metric=metric, trControl=control)
set.seed(7)
fit.rf <- train(Species~., data=dataset, method="rf", metric=metric, trControl=control)
results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
dotplot(results)
print(fit.lda)
#estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(prediction, validation$Species)
confusionMatrix(predictions, validation$Species)
install.packages("plotly")
library(plotly)
rm(list = ls())
gc()
x <- 0.2
y <- 0.72
speed <- 250
nbkdrops <- 100
cols <- c("#FFC85B", "#379956","#234C63")
ncolors <- length(cols)
n <- 1000  # Number of points
bkdrop.x <- runif(n, min = 0, max = 1)
bkdrop.y <- runif(n, min = 0, max = 1)
bkdrop <- function(n = 1000, amount = 0.005){
x <- jitter(bkdrop.x, amount = amount)
y <- jitter(bkdrop.y, amount = amount)
df <- data.frame(x, y)
return(df)
}
bkdrop.df <- data.frame()
for(i in 1:nbkdrops){
temp <- bkdrop()
temp <- data.frame(temp, frame = i, color = sample(1:ncolors, size = nrow(temp), replace = T))
bkdrop.df <- rbind(bkdrop.df, temp)
}
bklight.x <- c(0.28, 0.18, 0.48)
bklight.y <- c(0.42, 0.62, 0.65)
bklight.xend <- c(0.63, 0.50, 0.75)
bklight.yend <- c(0.42, 0.62, 0.65)
makebklight <- function(id){
bklight <- data.frame()
for(i in 1:nbkdrops){
temp <- data.frame(x = bklight.x[id],
y = bklight.y[id],
xend = bklight.xend[id],
yend = bklight.yend[id],
frame = i,
color = sample(1:ncolors, size = 1))
bklight <- rbind(bklight, temp)
}
return(bklight)
}
bklight1 <- makebklight(1)
bklight2 <- makebklight(2)
bklight3 <- makebklight(3)
bklight1$color[1] <- 1
bklight2$color[1] <- 2
bklight3$color[1] <- 3
p <- plot_ly(height = 800, width = 1024,
colors = cols,
frame = ~frame,
x = ~x,
y = ~y,
color = ~factor(color)) %>%
# Backdrop
add_markers(data = bkdrop.df,
opacity = 0.8,
marker = list(symbol = "star", size = 8),
hoverinfo = "none") %>%
# Add segments (for back lighting)
add_segments(data = bklight1,
xend = ~xend, yend = ~yend,
line = list(width = 150)) %>%
add_segments(data = bklight2,
xend = ~xend, yend = ~yend,
line = list(width = 150)) %>%
add_segments(data = bklight3,
xend = ~xend, yend = ~yend,
line = list(width = 150)) %>%
# Animation options
# See https://cpsievert.github.io/plotly_book/key-frame-animations.html
animation_opts(speed, easing = "linear", transition = 0) %>%
animation_button(x = 1, xanchor = "right", y = 1, yanchor = "bottom") %>%
animation_slider(hide = T) %>%
# Layout, annotations and shapes
layout(
showlegend = F,
xaxis = list(title = "", showgrid = F, zeroline = F, showticklabels = F, range = c(0, 1)),
yaxis = list(title = "", showgrid = F, zeroline = F, showticklabels = F, range = c(0, 1)),
annotations = list(
# For shadow
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x + 0.002, y = y + 0.002,
showarrow = F,
text = "Happy New<br>Year !",
font = list(size = 100, family = "Times New Roman",
color = "black")),
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x + 0.003, y = y + 0.003,
showarrow = F,
text = "Happy New<br>Year !",
font = list(size = 100, family = "Times New Roman",
color = "black")),
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x + 0.004, y = y + 0.004,
showarrow = F,
text = "Happy New<br>Year !",
font = list(size = 100, family = "Times New Roman",
color = "black")),
# Actual
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x, y = y,
showarrow = F,
text = "Happy New<br>Year !",
font = list(size = 100, family = "Times New Roman",
color = "#ff6666"))
),
shapes = list(
# Border
list(xref = "paper", yref = "paper",
x0 = 0, y0 = 0,
x1 = 1, y1 = 1,
type = "rect",
line = list(width = 10, color = cols[1])),
list(xref = "paper", yref = "paper",
x0 = 0.01, y0 = 0.01,
x1 = 0.99, y1 = 0.99,
type = "rect",
line = list(width = 10, color = cols[2])),
list(xref = "paper", yref = "paper",
x0 = 0.02, y0 = 0.02,
x1 = 0.98, y1 = 0.98,
type = "rect",
line = list(width = 10, color = cols[3])),
# Black outline
list(xref = "plot", yref = "plot",
path = "
M 0.50 0.53
L 0.50 0.50
L 0.18 0.50
L 0.18 0.73
L 0.48, 0.73",
type = "path",
line = list(width = 7, color = "black")),
list(xref = "plot", yref = "plot",
path = "
M 0.50 0.535
L 0.48 0.535
L 0.48 0.77
L 0.75 0.77
L 0.75 0.535
Z",
type = "path",
line = list(width = 7, color = "black")),
list(xref = "plot", yref = "plot",
path = "
M 0.28 0.5
L 0.28 0.31
L 0.63 0.31
L 0.63 0.535",
type = "path",
line = list(width = 7, color = "black"))
)
)
print(p)
quartz()
quartz()
print(p)
#Like last year, lets have some fun with the Plotly package. We’ll try out Plotly’s new animation capabilities.
library(plotly)
rm(list = ls())
gc()
# Options for plotting ----
x <- 0.2
y <- 0.72
speed <- 250
nbkdrops <- 100
# Colorset for plot
# See http://colorhunt.co/
cols <- c("#F49393", "#F21368","#AA236D")
ncolors <- length(cols)
#Like last year, lets have some fun with the Plotly package. We’ll try out Plotly’s new animation capabilities.
library(plotly)
rm(list = ls())
gc()
# Options for plotting ----
x <- 0.2
y <- 0.72
speed <- 250
nbkdrops <- 100
# Colorset for plot
# See http://colorhunt.co/
cols <- c("#F49393", "#F21368","#AA236D")
ncolors <- length(cols)
# Function to create random points by adding jitter to ----
# a starting set of points
n <- 1000  # Number of points
# Starting template
bkdrop.x <- runif(n, min = 0, max = 1)
bkdrop.y <- runif(n, min = 0, max = 1)
# Function Definition
bkdrop <- function(n = 1000, amount = 0.005){
x <- jitter(bkdrop.x, amount = amount)
y <- jitter(bkdrop.y, amount = amount)
df <- data.frame(x, y)
return(df)
}
# Make backdrops ----
# Each call to the backdrop function is a separate frame
# Number of frames is controlled by nbkdrops
bkdrop.df <- data.frame()
for(i in 1:nbkdrops){
temp <- bkdrop()
temp <- data.frame(temp, frame = i, color = sample(1:ncolors, size = nrow(temp), replace = T))
bkdrop.df <- rbind(bkdrop.df, temp)
}
# Make back lights ----
# Coordinates for backlight rectangles
# Will be plotted as line segments
bklight.x <- c(0.28, 0.18, 0.48)
bklight.y <- c(0.42, 0.62, 0.65)
bklight.xend <- c(0.63, 0.50, 0.75)
bklight.yend <- c(0.42, 0.62, 0.65)
# Function to create a dataframe containing coordinates, frame and
# color of each backlight segment
makebklight <- function(id){
bklight <- data.frame()
for(i in 1:nbkdrops){
temp <- data.frame(x = bklight.x[id],
y = bklight.y[id],
xend = bklight.xend[id],
yend = bklight.yend[id],
frame = i,
color = sample(1:ncolors, size = 1))
bklight <- rbind(bklight, temp)
}
return(bklight)
}
# Create backlight segments
bklight1 <- makebklight(1)
bklight2 <- makebklight(2)
bklight3 <- makebklight(3)
# Initialize colors for first frame
bklight1$color[1] <- 1
bklight2$color[1] <- 2
bklight3$color[1] <- 3
# Plot !! ----
p <- plot_ly(height = 800, width = 1024,
colors = cols,
frame = ~frame,
x = ~x,
y = ~y,
color = ~factor(color)) %>%
# Backdrop
add_markers(data = bkdrop.df,
opacity = 0.8,
marker = list(symbol = "star", size = 8),
hoverinfo = "none") %>%
# Add segments (for back lighting)
add_segments(data = bklight1,
xend = ~xend, yend = ~yend,
line = list(width = 150)) %>%
add_segments(data = bklight2,
xend = ~xend, yend = ~yend,
line = list(width = 150)) %>%
add_segments(data = bklight3,
xend = ~xend, yend = ~yend,
line = list(width = 150)) %>%
# Animation options
# See https://cpsievert.github.io/plotly_book/key-frame-animations.html
animation_opts(speed, easing = "linear", transition = 0) %>%
animation_button(x = 1, xanchor = "right", y = 1, yanchor = "bottom") %>%
animation_slider(hide = T) %>%
# Layout, annotations and shapes
layout(
showlegend = F,
xaxis = list(title = "", showgrid = F, zeroline = F, showticklabels = F, range = c(0, 1)),
yaxis = list(title = "", showgrid = F, zeroline = F, showticklabels = F, range = c(0, 1)),
annotations = list(
# For shadow
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x + 0.002, y = y + 0.002,
showarrow = F,
text = "You're A<br>Nerd !",
font = list(size = 100, family = "Comic Sans",
color = "black")),
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x + 0.003, y = y + 0.003,
showarrow = F,
text = "You're A<br>Nerd !",
font = list(size = 100, family = "Comic Sans",
color = "black")),
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x + 0.004, y = y + 0.004,
showarrow = F,
text = "You're A<br>Nerd !",
font = list(size = 100, family = "Comic Sans",
color = "black")),
# Actual
list(xref = "paper", yref = "paper",
xanchor = "left", yanchor = "top",
x = x, y = y,
showarrow = F,
text = "You're A<br>Nerd !",
font = list(size = 100, family = "Comic Sans",
color = "#ff6666"))
),
shapes = list(
# Border
list(xref = "paper", yref = "paper",
x0 = 0, y0 = 0,
x1 = 1, y1 = 1,
type = "rect",
line = list(width = 10, color = cols[1])),
list(xref = "paper", yref = "paper",
x0 = 0.01, y0 = 0.01,
x1 = 0.99, y1 = 0.99,
type = "rect",
line = list(width = 10, color = cols[2])),
list(xref = "paper", yref = "paper",
x0 = 0.02, y0 = 0.02,
x1 = 0.98, y1 = 0.98,
type = "rect",
line = list(width = 10, color = cols[3])),
# Black outline
list(xref = "plot", yref = "plot",
path = "
M 0.50 0.53
L 0.50 0.50
L 0.18 0.50
L 0.18 0.73
L 0.48, 0.73",
type = "path",
line = list(width = 7, color = "black")),
list(xref = "plot", yref = "plot",
path = "
M 0.50 0.535
L 0.48 0.535
L 0.48 0.77
L 0.75 0.77
L 0.75 0.535
Z",
type = "path",
line = list(width = 7, color = "black")),
list(xref = "plot", yref = "plot",
path = "
M 0.28 0.5
L 0.28 0.31
L 0.63 0.31
L 0.63 0.535",
type = "path",
line = list(width = 7, color = "black"))
)
)
print(p)
rm(list=ls())
source("Config.R")
source("helpers/QueryBuilder.R")
setwd("~/Desktop/HackNC2017")
read.csv("latlong.csv")
setwd("~/Desktop/HackNC2017/data")
read.csv("latlong.csv")
[[2]]
[,2]
states <- read.csv("latlong.csv")
[states,2]
states[,2]
states[,1]
paste(states[,1])
paste(states[,1], sep=" ")
state <- states[,1]
paste(state)
state
states$Alabama
states <- read.csv("latlong.csv", header=F)
state <- states$V1
paste(states$V1, sep=" ")
paste(paste(states$V1, sep=" "), sep=" ")
paste(states$V1, sep=" ", collapse=" ")
paste(states$V1, sep=" ", collapse="\", \"")
paste(states$V1, sep=" ", collapse="', ')
paste(states$V1, sep=" ", collapse="', '")
